import json
from typing import Any, Dict, Optional

import flask
import plaid
from plaid import ApiException
from plaid.api import plaid_api
from plaid.model.country_code import CountryCode
from plaid.model.link_token_create_request_user import LinkTokenCreateRequestUser
from plaid.model.products import Products
from source.plaid_configuration import PlaidConfiguration

''' Create Link Token

    The `/link/token/create` endpoint creates a link_token, which is required as 
    a parameter when initializing Link. Once Link has been initialized, it returns 
    a `public_token`, which can then be exchanged for an `access_token` via 
    `/item/public_token/exchange` as part of the main Link flow.

    A link_token generated by `/link/token/create` is also used to initialize other 
    Link flows, such as the update mode flow for tokens with expired credentials, 
    or the Payment Initiation (Europe) flow.
'''


def create_link_token(request: flask.Request) -> Dict[str, Any]:

    # Get UID from request
    data_dict: dict = json.loads(request.data)
    uid: Optional[str] = data_dict.get('uid')

    if uid is None:
        return {'status': 404, 'error_message': 'uid was None'}

    try:
        # Create Link Token Request
        request = plaid_api.LinkTokenCreateRequest(
            products=[Products('transactions')],
            client_name="CCCC",
            language='en',
            country_codes=[CountryCode('US')],
            user=LinkTokenCreateRequestUser(client_user_id=uid)
        )
        print(f'link_token_create_request: \n{request}')

        # TODO: Change to Development or Production for release
        plaid_config = PlaidConfiguration(plaid.Environment.Development)
        client = plaid_config.client()

        response: plaid_api.LinkTokenCreateResponse = client.link_token_create(
            request
        )
        print(f'link_token_create response: \n{response}')

        return response.to_dict()
    except ApiException as e:
        exceptions: dict = json.loads(e.body)

        return exceptions
